@Article{Drole2017,
author="Drole, Miha
and Kononenko, Igor",
title="Pairwise saturations in inductive logic programming",
journal="Artificial Intelligence Review",
year="2017",
month="Mar",
day="01",
volume="47",
number="3",
pages="395--415",
abstract="One of the main issues when using inductive logic programming (ILP) in practice remain the long running times that are needed by ILP systems to induce the hypothesis. We explore the possibility of reducing the induction running times of systems that use asymmetric relative minimal generalisation (ARMG) by analysing the bottom clauses of examples that serve as inputs into the generalisation operator. Using the fact that the ARMG covers all of the examples and that it is a subset of the variabilization of one of the examples, we identify literals that cannot appear in the ARMG and remove them prior to computing the generalisation. We apply this procedure to the ProGolem ILP system and test its performance on several real world data sets. The experimental results show an average speedup of                                                                           {\$}{\$}36{\backslash},{\backslash}{\%}{\$}{\$}                                                                                    36                                                {\%}                                                                             compared to the base ProGolem system and                                                                           {\$}{\$}12{\backslash},{\backslash}{\%}{\$}{\$}                                                                                    12                                                {\%}                                                                             compared to ProGolem extended with caching, both without a decrease in the accuracy of the produced hypotheses. We also observe that the gain from using the proposed method varies greatly, depending on the structure of the data set.",
issn="1573-7462",
doi="10.1007/s10462-016-9487-5",
url="https://doi.org/10.1007/s10462-016-9487-5"
}


@inproceedings{Shapiro:1981:MIS:1623264.1623364,
	author = {Shapiro, Ehud Y.},
	title = {The Model Inference System},
	booktitle = {Proceedings of the 7th International Joint Conference on Artificial Intelligence - Volume 2},
	series = {IJCAI'81},
	year = {1981},
	location = {Vancouver, BC, Canada},
	pages = {1064--1064},
	numpages = {1},
	url = {http://dl.acm.org/citation.cfm?id=1623264.1623364},
	acmid = {1623364},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
} 

@InProceedings{ProGolem,
	author="Muggleton, Stephen
	and Santos, Jos{\'e}
	and Tamaddoni-Nezhad, Alireza",
	editor="De Raedt, Luc",
	title="ProGolem: A System Based on Relative Minimal Generalisation",
	booktitle="Inductive Logic Programming",
	year="2010",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="131--148",
	abstract="Over the last decade Inductive Logic Programming systems have been dominated by use of top-down refinement search techniques. In this paper we re-examine the use of bottom-up approaches to the construction of logic programs. In particular, we explore variants of Plotkin's Relative Least General Generalisation (RLGG) which are based on subsumption relative to a bottom clause. With Plotkin's RLGG, clause length grows exponentially in the number of examples. By contrast, in the Golem system, the length of ij-determinate RLGG clauses were shown to be polynomially bounded for given values of i and j. However, the determinacy restrictions made Golem inapplicable in many key application areas, including the learning of chemical properties from atom and bond descriptions. In this paper we show that with Asymmetric Relative Minimal Generalisations (or ARMGs) relative to a bottom clause, clause length is bounded by the length of the initial bottom clause. ARMGs, therefore do not need the determinacy restrictions used in Golem. An algorithm is described for constructing ARMGs and this has been implemented in an ILP system called ProGolem which combines bottom-clause construction in Progol with a Golem control strategy which uses ARMG in place of determinate RLGG. ProGolem has been evaluated on several well-known ILP datasets. It is shown that ProGolem has a similar or better predictive accuracy and learning time compared to Golem on two determinate real-world applications where Golem was originally tested. Moreover, ProGolem was also tested on several non-determinate real-world applications where Golem is inapplicable. In these applications, ProGolem and Aleph have comparable times and accuracies. The experimental results also suggest that ProGolem significantly outperforms Aleph in cases where clauses in the target theory are long and complex.",
	isbn="978-3-642-13840-9"
}